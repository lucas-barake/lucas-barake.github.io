---
interface Props {
  title: string;
  description: string;
  date: Date;
  image: string | undefined;
}

const { title, description, date, image } = Astro.props;
import BaseLayout from "../../layouts/BaseLayout.astro";
---

<BaseLayout title={title} description={description} image={image} article={true}>
  <script
    type="application/ld+json"
    set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      headline: title,
      description: description,
      image: image ? new URL(image, Astro.site) : undefined,
      datePublished: new Date(date).toISOString(),
      dateModified: new Date(date).toISOString(),
      author: {
        "@type": "Person",
        name: "Lucas Barake",
        url: "https://github.com/lucas-barake"
      }
    })}
  />

  <div class="max-w-3xl mx-auto relative">
    <nav
      class="hidden xl:block xl:fixed xl:left-[max(0px,calc(50%-45rem))] xl:w-[250px] top-20 pl-4 h-fit max-h-[80vh] overflow-y-auto text-sm"
    >
      <h2 class="font-semibold mb-4 text-neutral-200">Table of Contents</h2>
      <ul class="space-y-2 text-neutral-400" id="toc">
        <!-- Will be populated by JavaScript -->
      </ul>
    </nav>

    <article
      class="prose prose-invert mx-auto max-w-3xl prose-pre:p-0 prose-h1:text-4xl prose-h2:text-3xl prose-pre:my-4 prose-h3:text-2xl prose-h4:text-xl prose-strong:text-white/90 prose-a:text-blue-400 hover:prose-a:text-blue-300 prose-code:text-blue-300 prose-blockquote:border-blue-500 prose-p:my-2 pb-20"
    >
      <header class="not-prose">
        <time class="text-sm text-neutral-300">
          {
            new Date(date).toLocaleDateString("en-US", {
              year: "numeric",
              month: "long",
              day: "numeric"
            })
          }
        </time>
        <h1 class="text-4xl font-bold mt-2 mb-4">{title}</h1>
      </header>

      <slot />
    </article>
  </div>
</BaseLayout>

<script>
  function handleStickyHeaders() {
    const headings = document.querySelectorAll(".prose h2, .prose h3, .prose h4");
    let currentStickyHeading: Element | null = null;
    let lastScrollY = window.scrollY;

    function updateStickyHeading() {
      const scrollY = window.scrollY;
      const scrollingDown = scrollY > lastScrollY;
      lastScrollY = scrollY;

      let newStickyHeading: Element | null = null;

      headings.forEach((heading) => {
        const rect = heading.getBoundingClientRect();

        if (scrollingDown) {
          if (rect.top <= 10 && rect.bottom > 10) {
            newStickyHeading = heading;
          }
        } else {
          if (rect.top <= 10) {
            newStickyHeading = heading;
          }
        }
      });

      if (newStickyHeading && newStickyHeading !== currentStickyHeading) {
        headings.forEach((h) => {
          (h as HTMLElement).style.position = "static";
        });

        (newStickyHeading as HTMLElement).style.position = "sticky";
        currentStickyHeading = newStickyHeading;
      }
    }

    window.addEventListener("scroll", updateStickyHeading, { passive: true });

    headings.forEach((heading) => {
      (heading as HTMLElement).style.position = "static";
    });

    updateStickyHeading();
  }

  function handleTableOfContents() {
    const headings = Array.from(document.querySelectorAll(".prose h2, .prose h3, .prose h4"));
    const tocList = document.getElementById("toc");

    if (!tocList) return;

    headings.forEach((heading, index) => {
      const link = document.createElement("a");
      link.href = `#${heading.id || ""}`;
      link.textContent = `${index + 1}. ${heading.textContent}`;
      link.className = "block transition-colors duration-200 hover:text-neutral-200";

      const listItem = document.createElement("li");
      listItem.appendChild(link);

      if (heading.tagName === "H3") {
        listItem.style.paddingLeft = "1rem";
      } else if (heading.tagName === "H4") {
        listItem.style.paddingLeft = "2rem";
      }

      tocList.appendChild(listItem);
    });

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const id = entry.target.id;
          const tocItem = tocList.querySelector(`a[href="#${id}"]`);

          if (entry.isIntersecting) {
            tocList.querySelectorAll("a").forEach((item) => {
              item.classList.remove("text-white");
            });
            tocItem?.classList.add("text-white");
          }
        });
      },
      {
        rootMargin: "-20px 0px -80%",
        threshold: 0
      }
    );

    headings.forEach((heading) => {
      if (heading.id) {
        observer.observe(heading);
      }
    });

    tocList.querySelectorAll("a").forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault();
        const targetId = link.getAttribute("href")?.slice(1);
        const targetElement = document.getElementById(targetId || "");
        if (targetElement) {
          headings.forEach((h) => {
            (h as HTMLElement).style.position = "static";
          });

          const offset = -5;
          const targetPosition =
            targetElement.getBoundingClientRect().top + window.scrollY - offset;

          window.scrollTo({
            top: targetPosition,
            behavior: "smooth"
          });
        }
      });
    });
  }

  handleStickyHeaders();
  handleTableOfContents();
</script>

<style is:global>
  /* Modern scrollbar for the entire site */
  :root {
    scrollbar-color: rgb(64, 64, 64) rgb(32, 32, 32);
  }

  ::-webkit-scrollbar {
    width: 10px;
    height: 10px;
  }

  ::-webkit-scrollbar-track {
    background: rgb(32, 32, 32);
    border-radius: 5px;
  }

  ::-webkit-scrollbar-thumb {
    background: rgb(64, 64, 64);
    border-radius: 5px;
    border: 2px solid rgb(32, 32, 32);
  }

  ::-webkit-scrollbar-thumb:hover {
    background: rgb(96, 96, 96);
  }

  /* Base pre styling */
  .prose pre {
    background-color: #1a1b26 !important;
    border-radius: 0.5rem;
    overflow-x: auto;
    position: relative;
  }

  .prose pre code {
    display: inline-block;
    padding: 1.5rem;
    font-size: 0.875rem;
    line-height: 1.6;
    background-color: transparent;
    border-radius: 0;
    white-space: pre;
    counter-reset: line;
    position: relative;
    min-width: fit-content;
    width: 100%;
    min-width: max(100%, fit-content);
  }

  /* Base line styling - always visible */
  .prose pre code .line {
    display: inline-block;
    position: relative;
    width: 100%;
  }

  /* Only apply dimming when code block has spotlights */
  .prose pre code.has-spotlights .line.dim {
    opacity: 0.6;
  }

  /* Fixed spotlight styling */
  .prose pre code .line.spotlight {
    opacity: 1;
    position: relative;
    isolation: isolate;
  }

  /* Create the spotlight effect using a pseudo-element */
  .prose pre code .line.spotlight::before {
    content: "";
    position: absolute;
    left: -1.5rem;
    right: -1.5rem;
    top: 0;
    bottom: 0;
    background: hsla(239, 84%, 65%, 0.075);
    z-index: -1;
    width: calc(100% + 3rem);
  }

  /* Hide backticks in inline code */
  .prose code::before,
  .prose code::after {
    display: none !important;
  }

  /* Inline code styling */
  .prose :not(pre) > code {
    background-color: rgb(29, 31, 39);
    padding: 0.2em 0.4em;
    border-radius: 0.25rem;
    font-size: 0.875em;
    font-weight: 500;
  }

  /* Enhanced link underlines */
  .prose a {
    text-decoration: none;
    background-image: linear-gradient(transparent 60%, rgb(59, 130, 246, 0.2) 40%);
    background-position: 0 100%;
    background-repeat: repeat-x;
    background-size: 100% 100%;
    transition: all 0.2s ease;
  }

  .prose a:hover {
    background-image: linear-gradient(transparent 0%, rgb(59, 130, 246, 0.2) 100%);
  }

  /* Better blockquotes */
  .prose blockquote {
    border-left-width: 3px;
    margin: 1rem 0;
    padding: 0.125rem 1rem;
    background-color: rgb(29, 31, 39);
    border-radius: 0.5rem;
    font-style: italic;
  }

  /* Remove default quotation marks */
  .prose blockquote p::before,
  .prose blockquote p::after {
    content: none;
  }

  /* List styling */
  .prose ul li::marker {
    color: rgb(59, 130, 246);
  }

  .prose ol li::marker {
    color: rgb(59, 130, 246);
  }

  /* Table styling */
  .prose table {
    border-collapse: collapse;
    width: 100%;
    margin: 2rem 0;
  }

  .prose th {
    background-color: rgb(29, 31, 39);
    padding: 0.75rem 1rem;
    text-align: left;
  }

  .prose td {
    padding: 0.75rem 1rem;
    border-bottom: 1px solid rgb(55, 65, 81);
  }

  /* Heading anchor links */
  .prose h2,
  .prose h3,
  .prose h4 {
    scroll-margin-top: 100px;
  }

  /* Sticky headers */
  .prose h2,
  .prose h3,
  .prose h4 {
    scroll-margin-top: 0;
    background-color: rgba(23, 23, 23, 0.8);
    backdrop-filter: blur(8px);
    margin: 0 !important;
    padding: 1rem 0 0.5rem 0;
    z-index: 10;
    border-bottom: 1px solid rgba(75, 85, 99, 0.2);
    width: 100%;
    top: 0;
  }

  .prose h2 {
    z-index: 30;
  }
  .prose h3 {
    z-index: 20;
  }
  .prose h4 {
    z-index: 10;
  }

  /* Add padding to content after headings to prevent overlap */
  .prose h2 + *,
  .prose h3 + *,
  .prose h4 + * {
    margin-top: 0.75rem !important;
  }

  /* Content spacing */
  .prose > div > *:not(h2):not(h3):not(h4) {
    margin-top: 0.75rem;
    margin-bottom: 0.75rem;
  }

  /* First heading should have no top margin */
  .prose > div > h2:first-child,
  .prose > div > h3:first-child,
  .prose > div > h4:first-child {
    margin-top: 0;
    padding-top: 0;
  }

  /* Add these new styles */
  #toc {
    scrollbar-width: thin;
  }

  #toc::-webkit-scrollbar {
    width: 6px;
  }

  #toc::-webkit-scrollbar-track {
    background: transparent;
  }

  #toc::-webkit-scrollbar-thumb {
    background: rgb(64, 64, 64);
    border-radius: 3px;
  }

  #toc::-webkit-scrollbar-thumb:hover {
    background: rgb(96, 96, 96);
  }
</style>
